// C++ code to implement Vigenere Cipher
//#include<bits/stdc++.h>
#include<iostream>
#include<string>
using namespace std;

// This function generates the key in
// a cyclic manner until it's length isi'nt
// equal to the length of original text
string generateKey(string str, string key)
{
    int x = str.size();

    for (int i = 0; ; i++)
    {
        if (x == i)
            i = 0;
        if (key.size() == str.size())
            break;
        key.push_back(key[i]);
    }
    return key;
}

// This function returns the encrypted text
// generated with the help of the key
string cipherText(string str, string key)
{
    string cipher_text;

    for (int i = 0; i < str.size(); i++)
    {
        // converting in range 0-25
        int x;
        string str1;
        str1 = str[i];
        string str2;
        str2 = key[i];
        x = stoi(str1) + stoi(str2);
        if (x % 10 == 0 && x!=10) {
            string k;
            k = to_string(x);
            char* char_arr;
            char_arr = &k[0];
            cipher_text.push_back(char_arr[0]);
        }
        else {
            string k;
            k = to_string(x%10);
            char* char_arr;
            char_arr = &k[0];
            cipher_text.push_back(char_arr[0]);
        }

        // convert into alphabets(ASCII)


        
    }
    return cipher_text;
}

// This function decrypts the encrypted text
// and returns the original text
string originalText(string cipher_text, string key)
{
    string orig_text;

    //for (int i = 0; i < cipher_text.size(); i++)
    //{
    //    // converting in range 0-25
    //    char x = (cipher_text[i] - key[i] + 10) % 10;

    //    // convert into alphabets(ASCII)
    //    x += '0';
    //    orig_text.push_back(x);
    //}
    for (int i = 0; i < cipher_text.size(); i++)
    {
        int x;
        string str1;
        str1 = cipher_text[i];
        string str2;
        str2 = key[i];
        x = stoi(str1) - stoi(str2);
        if (stoi(str1) > stoi(str2)) {
            string k;
            k = to_string(x);
            char* char_arr;
            char_arr = &k[0];
            orig_text.push_back(char_arr[0]);
        }
        else {
            string k;
            x = 10 + stoi(str1) - stoi(str2);
            k = to_string(x % 10);
            char* char_arr;
            char_arr = &k[0];
            orig_text.push_back(char_arr[0]);
        }
    }
    return orig_text;
}

// Driver program to test the above function
int main()
{
    string str = "1234567890123";
    string keyword = "1925";
    //string a = " 2159659309374";

    string key = generateKey(str, keyword);
    string cipher_text = cipherText(str, key);

    cout << "Ciphertext : "
        << cipher_text << "\n";

    cout << "Original/Decrypted Text : "
        << originalText(cipher_text, key);
    return 0;
}

    for(i=0; i<tot; i++)
        cin>>arr[i];
    s = arr[0];
    for(i=1; i<tot; i++)
    {
        if(s>arr[i])
            s = arr[i];
    }